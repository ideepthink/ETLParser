#执行何种处理。 sqlparser 解析log日志；viewparser 解析View关系 
logparser=true
viewparser=false

#CPU核心数量
cpunums=4

#日志名称解析规则
#此规则适用于大写文件名的================
#log.name.checkrule=[A-Z0-9]{1,}(.*?)LOG\\w*
#log.name.separator=.LOG_
#是否有4位的类型标识，以及标示符起始位置相对于名称分隔符起始位置的偏移量
#log.name.hascode=false
#log.name.codeidx=-4
#=======================================

#============此规则适用于文件名小写（即建行做了旧版预处理后）的日志文件
log.name.checkrule=[a-z0-9]{1,}(.*?)log
log.name.separator=.pl.
log.name.hascode=true
log.name.codeidx=-4
#=================================================================


#输出目录，此目录下会存放日志清洗的中间文件以及SQL解析后生成的Insert语句
targetpath=.\\out

##log日志过滤配置文件
#threads 处理线程数，此处理速度很快，可以不用设置太多线程
logrinser.threads=2
#日志源路径
logrinser.source=.\\ceblogs
#logrinser.source=D:\\temp\\script
#进行处理的脚本文件代码，以;号分隔。如果处理全部日志，设置为*
logrinser.perlcode=*
#logrinser.perlcode=0200;0150
#中间结果队列大小，不要设置太大。
logrinser.queue=25
#判断是否大文件的阈值，单位字节
sqlparser.sizethreshold=204800000
#sql解析用的SQL语句，需要根据实际情况修改日期格式和最后的DATABASENAME
sqlparser.param=SELECT OBJNAME || '@_YYMMDD@' AS PARAM FROM M04_TD_OBJECT A1 LEFT JOIN M04_TD_DB A2 ON A1.DB_ID = A2.DB_ID AND A2.START_DT <= CURRENT_TIMESTAMP(0) AND A2.END_DT > CURRENT_TIMESTAMP(0) WHERE A1.START_DT <= CURRENT_TIMESTAMP(0) AND A1.END_DT > CURRENT_TIMESTAMP(0) AND A2.DATABASENAME = 'DWSDATA'
#sqlparser.param=SELECT	OBJNAME || '@MMDD@' AS PARAM FROM	M04_TD_OBJECT A1 LEFT JOIN M04_TD_DB A2 ON	A1.DB_ID = A2.DB_ID AND	A2.START_DT <= CURRENT_TIMESTAMP(0) AND	A2.END_DT > CURRENT_TIMESTAMP(0) WHERE	A1.START_DT <= CURRENT_TIMESTAMP(0) AND	A1.END_DT > CURRENT_TIMESTAMP(0) AND	A2.DATABASENAME = 'DWSDATA' UNION ALL	SELECT	OBJNAME || '@_DEL_YYMMDD@' AS PARAM FROM	M04_TD_OBJECT A1 LEFT JOIN M04_TD_DB A2 ON	A1.DB_ID = A2.DB_ID AND	A2.START_DT <= CURRENT_TIMESTAMP(0) AND	A2.END_DT > CURRENT_TIMESTAMP(0) WHERE	A1.START_DT <= CURRENT_TIMESTAMP(0) AND	A1.END_DT > CURRENT_TIMESTAMP(0) AND	A2.DATABASENAME = 'DWSDATA'	AND a1.objname LIKE 'do_%'
#sqlparser.param=SELECT	OBJNAME || '@MMDD@' AS PARAM FROM	M04_TD_OBJECT A1 LEFT JOIN M04_TD_DB A2 ON	A1.DB_ID = A2.DB_ID AND	A2.START_DT <= CURRENT_TIMESTAMP(0) AND	A2.END_DT > CURRENT_TIMESTAMP(0) WHERE	A1.START_DT <= CURRENT_TIMESTAMP(0) AND	A1.END_DT > CURRENT_TIMESTAMP(0) AND	A2.DATABASENAME = 'DWSDATA' UNION ALL	SELECT	OBJNAME || '@_DEL_MMDD@' AS PARAM FROM	M04_TD_OBJECT A1 LEFT JOIN M04_TD_DB A2 ON	A1.DB_ID = A2.DB_ID AND	A2.START_DT <= CURRENT_TIMESTAMP(0) AND	A2.END_DT > CURRENT_TIMESTAMP(0) WHERE	A1.START_DT <= CURRENT_TIMESTAMP(0) AND	A1.END_DT > CURRENT_TIMESTAMP(0) AND	A2.DATABASENAME = 'DWSDATA'	AND a1.objname LIKE 'do_%'

#数据库名称的后缀，需转换为大写
viewparser.postfix=

#解析后的Rela_C Rela_T数据队列，只保存各字段的值，可设置大些
sqlparser.relationQueueSize=400
#解析后数据是否入库，包括logparser及viewparser的结果
sqlparser.writeDB=false


#数据库名称的后缀，需转换为大写
sqlparser.postfix=